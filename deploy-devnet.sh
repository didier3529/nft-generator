#!/bin/bash

# Solana Devnet Deployment Checklist
echo "========== Solana Devnet Deployment Checklist =========="

# 1. Check if Solana CLI is installed
if ! command -v solana &> /dev/null
then
    echo "Error: Solana CLI not found. Please install it first."
    exit 1
fi

# 2. Check for required files
if [ ! -f "./dist/program/nft_generator.so" ]; then
    echo "Error: Program binary not found at ./dist/program/nft_generator.so"
    echo "Please build the program first using 'cargo build-bpf'"
    exit 1
fi

# 3. Check for keypair
KEYPAIR_PATH="$HOME/.config/solana/devnet-keypair.json"
if [ ! -f "$KEYPAIR_PATH" ]; then
    echo "Devnet keypair not found. Creating a new one..."
    solana-keygen new --outfile "$KEYPAIR_PATH" --no-passphrase
    echo "New keypair created at $KEYPAIR_PATH"
fi

# 4. Get current balance
echo "Checking wallet balance..."
CURRENT_BALANCE=$(solana balance --keypair "$KEYPAIR_PATH" --url devnet)
echo "Current balance: $CURRENT_BALANCE"

# 5. Airdrop if balance is low (optional)
if (( $(echo "$CURRENT_BALANCE < 1" | bc -l) )); then
    echo "Balance is low. Requesting airdrop..."
    solana airdrop 2 --keypair "$KEYPAIR_PATH" --url devnet
    sleep 2
    NEW_BALANCE=$(solana balance --keypair "$KEYPAIR_PATH" --url devnet)
    echo "New balance after airdrop: $NEW_BALANCE"
fi

# 6. Configure Solana CLI to use devnet
echo "Setting Solana config to devnet..."
solana config set --url devnet

# 7. Deploy the program
echo "Deploying program to devnet..."
DEPLOY_OUTPUT=$(solana program deploy ./dist/program/nft_generator.so \
  --keypair "$KEYPAIR_PATH" \
  --upgrade-authority "$KEYPAIR_PATH" 2>&1)

echo "$DEPLOY_OUTPUT"

# 8. Extract and save program ID
PROGRAM_ID=$(echo "$DEPLOY_OUTPUT" | grep -oE 'Program Id: [a-zA-Z0-9]{32,}' | cut -d' ' -f3)

if [ -z "$PROGRAM_ID" ]; then
    echo "Failed to extract Program ID from deployment output."
    exit 1
fi

# Save program ID to file
echo "{\"programId\": \"$PROGRAM_ID\"}" > program-id.json
echo "Program ID saved to program-id.json: $PROGRAM_ID"

# 9. Verify deployment
echo "Verifying program deployment..."
VERIFICATION=$(solana program show --program-id "$PROGRAM_ID" --url devnet)
echo "$VERIFICATION"

# 10. Check if program is deployed correctly
if echo "$VERIFICATION" | grep -q "Program Id: $PROGRAM_ID"; then
    echo "✅ Program successfully deployed and verified on devnet!"
    echo "Program ID: $PROGRAM_ID"
else
    echo "❌ Program verification failed. Please check the deployment."
    exit 1
fi

# Store the program ID in the frontend configuration
echo "Updating frontend configuration with Program ID..."
CONFIG_FILE="./client/src/config/solana.js"

# Create the config directory if it doesn't exist
mkdir -p ./client/src/config

# Create or update the configuration file
cat > "$CONFIG_FILE" << EOL
// Solana Configuration
// Auto-generated by deployment script

export const SOLANA_CONFIG = {
  programId: '$PROGRAM_ID',
  network: 'devnet',
  rpcUrl: 'https://api.devnet.solana.com',
};

export default SOLANA_CONFIG;
EOL

echo "✅ Frontend configuration updated at $CONFIG_FILE"
echo "========== Deployment Complete =========="
echo "Next steps:"
echo "1. Update your client application to use the programId from program-id.json"
echo "2. Test your application on devnet"
echo "3. When ready, deploy to mainnet using deploy-mainnet.sh" 