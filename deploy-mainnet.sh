#!/bin/bash

# Solana Mainnet Deployment Script
# IMPORTANT: This is for MAINNET deployment and will use real SOL!

echo "⚠️ WARNING: This script will deploy to MAINNET and use REAL SOL! ⚠️"
echo "Would you like to continue? (y/N)"
read -r confirmation

if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled."
    exit 0
fi

# 1. Check if Solana CLI is installed
if ! command -v solana &> /dev/null
then
    echo "Error: Solana CLI not found. Please install it first."
    exit 1
fi

# 2. Ask for keypair path (don't use default for mainnet)
echo "Please enter the path to your mainnet keypair (DO NOT USE DEVNET KEYPAIR):"
read -r KEYPAIR_PATH

if [ ! -f "$KEYPAIR_PATH" ]; then
    echo "Error: Keypair file not found at $KEYPAIR_PATH"
    exit 1
fi

# 3. Verify the program binary exists
if [ ! -f "./dist/program/nft_generator.so" ]; then
    echo "Error: Program binary not found at ./dist/program/nft_generator.so"
    echo "Please build the program first using 'cargo build-bpf --release'"
    exit 1
fi

# 4. Display current balance
echo "Checking wallet balance..."
solana config set --url mainnet-beta
CURRENT_BALANCE=$(solana balance --keypair "$KEYPAIR_PATH")
echo "Current mainnet balance: $CURRENT_BALANCE SOL"

# 5. Request confirmation of balance
echo "Is this balance sufficient for deployment? (y/N)"
read -r balance_confirmation
if [[ ! "$balance_confirmation" =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled. Please ensure you have enough SOL for deployment."
    exit 0
fi

# 6. Verify the binary checksum
CHECKSUM=$(sha256sum ./dist/program/nft_generator.so | cut -d' ' -f1)
echo "Program binary checksum: $CHECKSUM"
echo "Please verify this matches your expected build. Continue? (y/N)"
read -r checksum_confirmation
if [[ ! "$checksum_confirmation" =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled. Binary verification failed."
    exit 0
fi

# 7. Configure Solana CLI to use mainnet
echo "Setting Solana config to mainnet-beta..."
solana config set --url mainnet-beta

# 8. Estimate deployment cost
echo "Estimating deployment cost..."
PROGRAM_SIZE=$(du -b ./dist/program/nft_generator.so | cut -f1)
ESTIMATED_COST=$(echo "scale=4; $PROGRAM_SIZE * 0.00000001" | bc)
echo "Program size: $PROGRAM_SIZE bytes"
echo "Estimated deployment cost: ~$ESTIMATED_COST SOL (plus transaction fees)"
echo "Proceed with deployment? This will use REAL SOL! (y/N)"
read -r final_confirmation
if [[ ! "$final_confirmation" =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled."
    exit 0
fi

# 9. Deploy the program
echo "Deploying program to mainnet..."
echo "This may take a while. Please do not interrupt the process."
DEPLOY_OUTPUT=$(solana program deploy ./dist/program/nft_generator.so \
  --keypair "$KEYPAIR_PATH" \
  --upgrade-authority "$KEYPAIR_PATH" 2>&1)

echo "$DEPLOY_OUTPUT"

# 10. Extract and save program ID
PROGRAM_ID=$(echo "$DEPLOY_OUTPUT" | grep -oE 'Program Id: [a-zA-Z0-9]{32,}' | cut -d' ' -f3)

if [ -z "$PROGRAM_ID" ]; then
    echo "Failed to extract Program ID from deployment output."
    exit 1
fi

# Save program ID to mainnet program ID file
echo "{\"programId\": \"$PROGRAM_ID\", \"network\": \"mainnet-beta\"}" > program-id-mainnet.json
echo "Program ID saved to program-id-mainnet.json: $PROGRAM_ID"

# 11. Verify deployment
echo "Verifying program deployment..."
VERIFICATION=$(solana program show --program-id "$PROGRAM_ID" --url mainnet-beta)
echo "$VERIFICATION"

# 12. Check if program is deployed correctly
if echo "$VERIFICATION" | grep -q "Program Id: $PROGRAM_ID"; then
    echo "✅ Program successfully deployed and verified on mainnet!"
    echo "Program ID: $PROGRAM_ID"
else
    echo "❌ Program verification failed. Please check the deployment."
    exit 1
fi

# 13. Update the frontend configuration for mainnet
echo "Updating frontend configuration with mainnet Program ID..."
CONFIG_FILE="./client/src/config/solana.js"

# Create the config directory if it doesn't exist
mkdir -p ./client/src/config

# Create or update the configuration file
cat > "$CONFIG_FILE" << EOL
// Solana Configuration
// Auto-generated by mainnet deployment script

export const SOLANA_CONFIG = {
  programId: '$PROGRAM_ID',
  network: 'mainnet-beta',
  rpcUrl: 'https://api.mainnet-beta.solana.com',
};

export default SOLANA_CONFIG;
EOL

echo "✅ Frontend configuration updated for MAINNET at $CONFIG_FILE"
echo "========== Mainnet Deployment Complete =========="
echo "Post-deployment checklist:"
echo "1. Verify program functionality on mainnet before announcing"
echo "2. Save your program ID and upgrade authority securely"
echo "3. Consider transferring upgrade authority to a multisig wallet"
echo "4. Update documentation with the new program ID" 